package frc.montylib.swerve;

import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.kinematics.SwerveModulePosition;
import edu.wpi.first.math.kinematics.SwerveModuleState;

public abstract class ModuleIOFrame {
    //Feedback

    /**
     * Retrives the current position the module wheel has traveled
     * @return the position, in meters, of the module wheel
     */
    public abstract double getDrivePosition();

    /**
     * Retrives the current velocity of the module wheel
     * @return the velocity, in meters per second, of the module wheel
     */
    public abstract double getDriveVelocity();

    /**
     * Retrives the current position of the module wheel rotation
     * @return the position, in radians, of the module wheel rotation
     */
    public abstract double getPivotPosition();

    /**
     * Retrives the current velocity of the module wheel rotation
     * @return the velocity, in radians per second, of the module wheel rotation
     */
    public abstract double getPivotVelocity();

    /**
     * Retrives the current Rotation2d of the module wheel rotation
     * @return the Rotation2d, in radians, of the module wheel rotation
     */
    public abstract Rotation2d getPivotRotation2d();

    /**
     * Retrives the current SwerveModuleState of the module wheel velocity and rotation
     * @return the SwerveModuleState generated by the velocity and rotation of the wheel
     */
    public abstract SwerveModuleState getState();

    /**
     * Retrives the current SwerveModulePosition of the module wheel position and rotation
     * @return the SwerveModulePosition generated by the position and rotation of the wheel
     */
    public abstract SwerveModulePosition getPosition();

    //Movement

    /**
     * Sets the desired movement of the module given a SwerveModuleState
     * @param state the state for the motors to inherit desired movement data from
     */
    public abstract void setDesiredState(SwerveModuleState state);

    //Utility

    /**Resets the drive and pivot encoders of the module to 0 */
    public abstract void resetEncoders();

    /**Stops all output to the motors */
    public abstract void stop();
}
